//+build ignore

package main

import (
	"bytes"
	"compress/gzip"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
	"time"
)

func readRaw(filename string) []byte {
	raw, err := ioutil.ReadFile("../../front/" + filename)

	if err != nil {
		panic(err)
	}

	return raw
}

func readGzip(filename string) []byte {
	raw := readRaw(filename)

	var b bytes.Buffer

	w := gzip.NewWriter(&b)

	_, err := w.Write(raw)
	w.Close()

	if err != nil {
		panic(err)
	}

	return b.Bytes()
}

func main() {
	index := readRaw("index.html")
	wasmExec := readRaw("lib/wasm_exec.js")
	gameJs := readRaw("game.js")
	style := readRaw("style.css")
	favicon := readRaw("favicon.ico")

	wasm := readGzip("lib.wasm")
	pixi := readGzip("lib/pixi.min.js")

	f, err := os.Create("build.go")
	defer f.Close()

	if err != nil {
		panic(err)
	}

	err = packageTemplate.Execute(
		f,
		struct {
			Timestamp    time.Time
			Index        string
			WasmExec     string
			GameJs       string
			Style        string
			FaviconBytes []byte
			WasmBytes    []byte
			PixiBytes    []byte
		}{
			Timestamp:    time.Now(),
			Index:        sanitize(string(index)),
			WasmExec:     sanitize(string(wasmExec)),
			GameJs:       sanitize(string(gameJs)),
			Style:        sanitize(string(style)),
			FaviconBytes: favicon,
			WasmBytes:    wasm,
			PixiBytes:    pixi,
		})

	if err != nil {
		os.Remove("build.go")
		panic(err)
	}
}

func sanitize(str string) string {
	return strings.Replace(str, "`", "` + \"`\" + `", -1)
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package static

// StaticHtmlIndex is the raw contents of index.html
var StaticHtmlIndex = ` + "`{{ .Index }}`" + `

// StaticJsWasmExec is the raw contents of wasm_exec.js
var StaticJsWasmExec = ` + "`{{ .WasmExec }}`" + `

// StaticJsGame is the raw contents of game.js
var StaticJsGame = ` + "`{{ .GameJs }}`" + `

// StaticCssStyle is the raw contents of style.css
var StaticCssStyle = ` + "`{{ .Style }}`" + `

// StaticFavicon is the favicon's raw binary contents
var StaticFavicon = []byte{
	// {{ len .FaviconBytes }} bytes
	{{ range .FaviconBytes }} {{ . | printf "%#x," }} {{ end }}
}

// StaticLibPixiJsGzip is the gzipped PixiJS library
var StaticLibPixiJsGzip = []byte{
	// {{ len .PixiBytes }} bytes
	{{ range .PixiBytes }} {{ . | printf "%#x," }} {{ end }}
}

// StaticLibWasm is the gzipped binary contents of lib.wasm
var StaticLibWasmGzip = []byte{
	// {{ len .WasmBytes }} bytes
	{{ range .WasmBytes }} {{ . | printf "%#x," }} {{ end }}
}`))
